{
  "0": {
    "id": "0",
    "title": "",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "Cassandra Lab",
    "content": "Cassandra Lab This lab shows you how to deploy a cassandra cluster in DC/OS",
    "url": "http://localhost:4000/labs/cassandra%20lab/cassandra%20lab.html",
    "relUrl": "/labs/cassandra%20lab/cassandra%20lab.html"
  },
  "2": {
    "id": "2",
    "title": "CICD Lab",
    "content": "CICD Lab This lab shows you how to deploy a CI/CD pipeline in DC/OS",
    "url": "http://localhost:4000/labs/cicd%20lab/cicd%20lab.html",
    "relUrl": "/labs/cicd%20lab/cicd%20lab.html"
  },
  "3": {
    "id": "3",
    "title": "Connecting to a Kubernetes Cluster",
    "content": "Lab 2 - Connecting kubectl to DC/OS Step 1 Find public IP address of Public DC/OS Node Your instructors have pre-installed the DC/OS Edge Load Balancer on your cluster and configured it to provide ingress to your Kuberenetes cluster’s control plane. To attach kubectl to your cluster, you must point the configuration command below to the public IP address of the public DC/OS agent where Edge-LB is running. Your DC/OS cluster contains 1 public agent nodes. To determine where Edge-LB is running, open your clusterinfo.txt file and note the IP addresses of your public agent. Next, attempt to visit the following URL for your public agents: &lt;public agent public IP address&gt;:6090/haproxy?stats Step 2 Connecting using Kubeconfig Configure kubectl to connect to the Kubernetes cluster running on DC/OS using the following commands: dcos kubernetes cluster kubeconfig --insecure-skip-tls-verify --context-name=kubernetes-cluster1 --cluster-name=kubernetes-cluster1 --apiserver-url=https://&lt;public agent where Edge-LB is running IP address&gt;:6443 Confirm connection: kubectl get nodes Step 3 Kubernetes Dashboard (Official UI of Kubernetes) To access the dashboard run, we will expose the Kubernetes UI via a NodePort deployment on the Kubernetes cluster that we will access on our DC/OS public agent. To begin, download dashboard-ext.yaml and save it to your local directory with the following command: curl -O https://raw.githubusercontent.com/tbaums/dcos-mandt-labs/master/clusters/setup/dashboard-ext.yaml /* Raw content of dashboard-ext.yaml */ apiVersion: v1 kind: Service metadata: name: kubernetes-dashboard-ext namespace: kube-system spec: type: NodePort selector: k8s-app: kubernetes-dashboard ports: - protocol: TCP nodePort: 30443 port: 8443 Next, let’s create this deployment on our Kubernetes cluster: kubectl apply -f dashboard-ext.yaml To authenticate to your Kubernetes dashboard, you will need your Kuberenetes config file, which contains your authorization token. Let’s put the config file in our present working directory for convenience: # Mac instructions cp ~/.kube/config ./ To access your Kubernetes dashboard, point your web browser to the URL below: Make sure to include https:// in your URL https://&lt;your DC/OS public agent public IP&gt;:30443 Lastly, find select your Kubernetes config file from the dialog box and click “Sign in” Congratulations! You should now see the Kubernetes dashboard.",
    "url": "http://localhost:4000/labs/kubernetes%20lab/connecting.html",
    "relUrl": "/labs/kubernetes%20lab/connecting.html"
  },
  "4": {
    "id": "4",
    "title": "Data Services Lab",
    "content": "Data Services Lab This lab shows you how to deploy a data services in DC/OS",
    "url": "http://localhost:4000/labs/data%20services%20lab/data%20services%20lab.html",
    "relUrl": "/labs/data%20services%20lab/data%20services%20lab.html"
  },
  "5": {
    "id": "5",
    "title": "Deploying Another Kubernetes Cluster",
    "content": "Launch a second Kubernetes cluster In this lab, you will launch a second Kubernetes cluster on the same DC/OS cluster, demonstrating Mesosphere Kubernetes Engine’s ability to run high-density, multi-kubernetes environments. Step 1 Create SSL keys, Service Account, and Secret for Kubernetes Cluster 2 Run the commands below to create the SSL keys, service account, and secret for your second Kubernetes cluster. dcos security org service-accounts keypair private-key.pem public-key.pem dcos security org service-accounts create -p public-key.pem -d &quot;Kubernetes cluster 2 service account&quot; kubernetes-cluster2 dcos security secrets create-sa-secret private-key.pem kubernetes-cluster2 kubernetes-cluster2/sa Step 2 Add permissions Run the commands below to grant the service account permissions to create and view Kubernetes clusters. dcos security org groups add_user superusers kubernetes-cluster2 Step 3 Launch the second Kubernetes cluster Now, we will launch a Kubernetes cluster using the service account and secret we just created. Copy and paste the command below into your terminal to create a package installer options file that references the service account and secret we just created. Be sure to copy and paste the entire code snippet below (including the final line containing EOF) cat &gt; cluster2-options.json &lt;&lt; EOF { &quot;service&quot;: { &quot;name&quot;: &quot;kubernetes-cluster2&quot;, &quot;service_account&quot;: &quot;kubernetes-cluster2&quot;, &quot;service_account_secret&quot;: &quot;kubernetes-cluster2/sa&quot; }, &quot;kubernetes&quot;: { &quot;private_node_count&quot;: 2 } } EOF Then run the DC/OS Kubernetes CLI command to launch the Kubernetes cluster. dcos kubernetes cluster create --options=cluster2-options.json --yes Your new Kubernetes cluster will take a few minutes to spin up. You can see the installation runbook automation and monitor the status of installation of each component with the command below: watch dcos kubernetes manager plan status deploy --name=kubernetes-cluster2 When all the Kubernetes cluster elements report a status of COMPLETE, your new cluster is ready.",
    "url": "http://localhost:4000/labs/kubernetes%20lab/deploy.html",
    "relUrl": "/labs/kubernetes%20lab/deploy.html"
  },
  "6": {
    "id": "6",
    "title": "Getting Set Up",
    "content": "Getting Set Up The instructor will give you the IP address and credentials that you will need to SSH into your DC/OS cluster. Set Up DC/OS Command Line Step 1 If you have a Macbook or Linux laptop and you don’t have any restrictions on accessing servers on the internet, you can use the instructions in Step 2 on your laptop. If you don’t then you should login to your cluster’s “bootstrap” server and use it as a command line client. Download the id_rsa key from the workshop cluster Github location at: https://github.com/tbaums/dcos-mandt-labs/tree/master/keys If using Windows and Putty Telnet, you will need to download the key above and convert it to a .ppk file. Please see the instructor with questions. Step 2 If your laptop can access any servers on the internet without restriction, please install the DC/OS CLI locally on your machine. If your laptop is restricted, please SSH into your “bootstrap” server and install the DC/OS CLI there. For the rest of the course, you will execute DC/OS command line commands from your bootstrap server (located within your VPC). To SSH to the bootstrap server: ssh -i ./id_rsa centos@&lt;your bootstrap server ip address&gt; All students continue here: Your instructor will give you: Master IP address Public IP address DC/OS user and password Access your DC/OS Dashboard using the URL https://&lt;MASTER IP&gt;/. Make sure you use HTTPS. Set up the DC/OS command line by clicking on the top left and choosing “Install CLI” Click in the dialogue box to copy the command Paste that command into your Terminal and press enter For CoreOS use the following commands to install the CLI binary: sudo mkdir -p /opt/bin &amp;&amp; curl https://downloads.dcos.io/binaries/cli/linux/x86-64/dcos-1.12/dcos -o dcos &amp;&amp; chmod +x dcos &amp;&amp; sudo mv dcos /opt/bin dcos cluster setup https://34.201.164.41 dcos Using Homebrew brew install dcos-cli Once the CLI is installed, confirm that it is installed correctly and connected to your cluster by running following command dcos node The output should be a list of nodes in the cluster HOSTNAME IP ID TYPE REGION ZONE 10.0.0.101 10.0.0.101 94141db5-28df-4194-a1f2-4378214838a7-S0 agent aws/us-west-2 aws/us-west-2a 10.0.2.100 10.0.2.100 94141db5-28df-4194-a1f2-4378214838a7-S4 agent aws/us-west-2 aws/us-west-2a Step 4 Tour DC/OS Catalog Your instructor will give you a tour of DC/OS UI and catalog. All labs are available onine at dcos-labs You can find the source code for the labs at GitHub: dcos / demos",
    "url": "http://localhost:4000/getting%20setup.html",
    "relUrl": "/getting%20setup.html"
  },
  "7": {
    "id": "7",
    "title": "",
    "content": "",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "8": {
    "id": "8",
    "title": "Kubernetes Lab",
    "content": "Kubernete Lab This lab shows you how to deploy a kubernetes cluster in DC/OS",
    "url": "http://localhost:4000/labs/kubernetes%20lab/kubernetes%20lab.html",
    "relUrl": "/labs/kubernetes%20lab/kubernetes%20lab.html"
  },
  "9": {
    "id": "9",
    "title": "Launch a Kubernetes Cluster",
    "content": "Launch a Kubernetes Cluster Step 1 To launch a Kubernetes cluster, you must first deploy the Mesosphere Kubernetes Engine (MKE) control plane manager. Your instructors have pre-installed MKE on your behalf, however you still need the DC/OS Kubernetes CLI package. Install the DC/OS Kubernetes CLI package with the following command: dcos package install kubernetes --yes --cli You’re now ready to launch your first Kubernetes cluster! Step 2 Now that the Kubernetes control plan manager is running, you can use it to launch a Kubernetes cluster. Since you are using the Enterprise version of DC/OS, you can use the DC/OS certificate authority to create an SSL key to be used with a DC/OS service account user. First, you must install the DC/OS Enterprise CLI, which gives you access to DC/OS Enterprise security features, among other useful tools. dcos package install dcos-enterprise-cli --yes Next, run the following commands to create the SSL keys, the service account and the secret. dcos security org service-accounts keypair private-key.pem public-key.pem dcos security org service-accounts create -p public-key.pem -d &quot;Kubernetes cluster 1 service account&quot; kubernetes-cluster1 dcos security secrets create-sa-secret private-key.pem kubernetes-cluster1 kubernetes-cluster1/sa Once completed, you should be able to see the secret by clicking on the Secrets tab in the left navigation pane. You should also grant the correct permissions to allow the new service account to launch and view Kubernetes clusters. Run the following ACL commands: dcos security org groups add_user superusers kubernetes-cluster1 Note: See below for an example of more granular security settings that more closely resembles what you would use in production (link). Now, we will launch a Kubernetes cluster using the service account and secret we just created. Copy and paste the command below into your terminal to create a package installer options file that references the service account and secret we just created. Be sure to copy and paste the entire code snippet below (including the final line containing EOF) cat &gt; cluster1-options.json &lt;&lt; EOF { &quot;service&quot;: { &quot;name&quot;: &quot;kubernetes-cluster1&quot;, &quot;service_account&quot;: &quot;kubernetes-cluster1&quot;, &quot;service_account_secret&quot;: &quot;kubernetes-cluster1/sa&quot; }, &quot;kubernetes&quot;: { &quot;public_node_count&quot;: 1, &quot;private_node_count&quot;: 1, &quot;high_availability&quot;: true } } EOF Then run the DC/OS Kubernetes CLI command to launch the Kubernetes cluster. dcos kubernetes cluster create --options=cluster1-options.json --yes By Deploying, you agree to the Terms and Conditions https://mesosphere.com/catalog-terms-conditions/#certified-services Kubernetes on DC/OS. Documentation: https://docs.mesosphere.com/service-docs/kubernetes-cluster Issues: https://github.com/mesosphere/dcos-kubernetes-quickstart/issues Creating Kubernetes cluster kubernetes-cluster1 DC/OS Kubernetes is being installed! Kubernetes cluster &#39;[kubernetes-cluster1]&#39; is being created Your new Kubernetes cluster will take a few minutes to spin up. You can see the installation runbook automation and monitor the status of installation of each component with the command below: watch dcos kubernetes manager plan status deploy --name=kubernetes-cluster1 First, it will show some Kubernetes components completed, and some started or pending like this: $ watch dcos kubernetes manager plan status deploy --name=kubernetes-cluster1 deploy (serial strategy) (PENDING) etcd (serial strategy) (PENDING) etcd-0:[peer] (PENDING) etcd-1:[peer] (PENDING) etcd-2:[peer] (PENDING) control-plane (dependency strategy) (PENDING) kube-control-plane-0:[instance] (PENDING) kube-control-plane-1:[instance] (PENDING) kube-control-plane-2:[instance] (PENDING) mandatory-addons (serial strategy) (PENDING) mandatory-addons-0:[instance] (PENDING) node (dependency strategy) (PENDING) kube-node-0:[kubelet] (PENDING) public-node (dependency strategy) (PENDING) kube-node-public-0:[kubelet] (PENDING) When it is completely installed, the plan status should look like this: $ watch dcos kubernetes manager plan status deploy --name=kubernetes-cluster1 deploy (serial strategy) (COMPLETE) etcd (serial strategy) (COMPLETE) etcd-0:[peer] (COMPLETE) etcd-1:[peer] (COMPLETE) etcd-2:[peer] (COMPLETE) control-plane (dependency strategy) (COMPLETE) kube-control-plane-0:[instance] (COMPLETE) kube-control-plane-1:[instance] (COMPLETE) kube-control-plane-2:[instance] (COMPLETE) mandatory-addons (serial strategy) (COMPLETE) mandatory-addons-0:[instance] (COMPLETE) node (dependency strategy) (COMPLETE) kube-node-0:[kubelet] (COMPLETE) public-node (dependency strategy) (COMPLETE) kube-node-public-0:[kubelet] (COMPLETE) Step 3 Install Kubernetes kubectl Command Line For Windows with curl installed the commands are: curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/windows/amd64/kubectl.exe Then, add the binary to your PATH. For Macs with brew installed the command is: brew install kubectl For CoreOS the commands are: curl -O curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl chmod +x kubectl sudo mkdir -p /opt/bin sudo mv kubectl /opt/bin/kubectl For Red Red or CentOS the commands are: curl -O curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl chmod +x kubectl sudo mkdir -p /usr/local/bin sudo mv kubectl /usr/local/bin/kubectl For Ubuntu the commands are: sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - sudo touch /etc/apt/sources.list.d/kubernetes.list echo &quot;deb http://apt.kubernetes.io/ kubernetes-xenial main&quot; | sudo tee -a /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubectl If your OS is not listed above, or if you need additional help installing kubectl please see here. Confirm that kubectl is installed and in path /usr/local/bin using the command below. (Kubectl will say it is not connected to a dcos cluster yet, which is expected.) kubectl version Production Permissions Below are a set of example permissions for a Kubernetes cluster on DC/OS that more closely resemble what would be used in a production environment. They are provided for illustrative purposes only, and are not required for this lab exercise. dcos security org users grant kubernetes-cluster dcos:mesos:master:framework:role:kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:task:user:root create dcos security org users grant kubernetes-cluster dcos:mesos:agent:task:user:root create dcos security org users grant kubernetes-cluster dcos:mesos:master:reservation:role:kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:reservation:principal:kubernetes-cluster delete dcos security org users grant kubernetes-cluster dcos:mesos:master:volume:role:kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:volume:principal:kubernetes-cluster delete dcos security org users grant kubernetes-cluster dcos:secrets:default:/kubernetes-cluster/* full dcos security org users grant kubernetes-cluster dcos:secrets:list:default:/kubernetes-cluster read dcos security org users grant kubernetes-cluster dcos:adminrouter:ops:ca:rw full dcos security org users grant kubernetes-cluster dcos:adminrouter:ops:ca:ro full dcos security org users grant kubernetes-cluster dcos:mesos:master:framework:role:slave_public/kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:framework:role:slave_public/kubernetes-cluster-role read dcos security org users grant kubernetes-cluster dcos:mesos:master:reservation:role:slave_public/kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:volume:role:slave_public/kubernetes-cluster-role create dcos security org users grant kubernetes-cluster dcos:mesos:master:framework:role:slave_public read dcos security org users grant kubernetes-cluster dcos:mesos:agent:framework:role:slave_public read",
    "url": "http://localhost:4000/labs/kubernetes%20lab/launch.html",
    "relUrl": "/labs/kubernetes%20lab/launch.html"
  },
  "10": {
    "id": "10",
    "title": "Monitoring Lab",
    "content": "Monitoring Lab This lab shows you how to deploy monitoring in DC/OS",
    "url": "http://localhost:4000/labs/monitoring/monitoring%20lab.html",
    "relUrl": "/labs/monitoring/monitoring%20lab.html"
  },
  "11": {
    "id": "11",
    "title": "Scaling a Kubernetes Cluster",
    "content": "Scaling Your Kuberenetes Cluster By Adding More Kubelets Sometimes you need more Kubernetes infrastructure to run more applications. DC/OS can easily scale the cluster. There are several ways to scale Kubernetes in DC/OS, including via the CLI, HTTP API, or GUI. In this exercise, we will use the DC/OS GUI to scale our Kubernetes cluster. From the UI, go to Services &gt; Kubernetes. Next, choose “Edit” in top right. Under “kubernetes” in left hand menu, change the number of “node count” to 2. Then select “Review and Run”. You will observe that the scheduler task updates, followed by etcd. Lastly, the new Kubelet will start up and join the Kubernetes cluster. Wait for the new node change to Running state then you can confirm the additional Kubelet was added sucessfully by running: kubectl get nodes NAME STATUS ROLES AGE VERSION kube-control-plane-0-instance.kubernetes-cluster1.mesos Ready master 110m v1.13.3 kube-control-plane-1-instance.kubernetes-cluster1.mesos Ready master 32m v1.13.3 kube-control-plane-2-instance.kubernetes-cluster1.mesos Ready master 32m v1.13.3 kube-node-0-kubelet.kubernetes-cluster1.mesos Ready &lt;none&gt; 108m v1.13.3 kube-node-1-kubelet.kubernetes-cluster1.mesos Ready &lt;none&gt; 7m48s v1.13.3 kube-node-public-0-kubelet.kubernetes-cluster1.mesos Ready &lt;none&gt; 107m v1.13.3",
    "url": "http://localhost:4000/labs/kubernetes%20lab/scaling.html",
    "relUrl": "/labs/kubernetes%20lab/scaling.html"
  }
  
}
